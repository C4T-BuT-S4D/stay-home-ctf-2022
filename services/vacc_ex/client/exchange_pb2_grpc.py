# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import exchange_pb2 as exchange__pb2


class VaccineExchangeStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Register = channel.unary_unary(
                '/VaccineExchange/Register',
                request_serializer=exchange__pb2.RegisterRequest.SerializeToString,
                response_deserializer=exchange__pb2.RegisterResponse.FromString,
                )
        self.Login = channel.unary_unary(
                '/VaccineExchange/Login',
                request_serializer=exchange__pb2.LoginRequest.SerializeToString,
                response_deserializer=exchange__pb2.LoginResponse.FromString,
                )
        self.CreateVaccine = channel.unary_unary(
                '/VaccineExchange/CreateVaccine',
                request_serializer=exchange__pb2.CreateVaccineRequest.SerializeToString,
                response_deserializer=exchange__pb2.CreateVaccineResponse.FromString,
                )
        self.Buy = channel.unary_unary(
                '/VaccineExchange/Buy',
                request_serializer=exchange__pb2.BuyRequest.SerializeToString,
                response_deserializer=exchange__pb2.BuyResponse.FromString,
                )
        self.List = channel.unary_unary(
                '/VaccineExchange/List',
                request_serializer=exchange__pb2.ListRequest.SerializeToString,
                response_deserializer=exchange__pb2.ListResponse.FromString,
                )
        self.Balance = channel.unary_unary(
                '/VaccineExchange/Balance',
                request_serializer=exchange__pb2.BalanceRequest.SerializeToString,
                response_deserializer=exchange__pb2.BalanceResponse.FromString,
                )
        self.GetPrice = channel.unary_unary(
                '/VaccineExchange/GetPrice',
                request_serializer=exchange__pb2.PriceRequest.SerializeToString,
                response_deserializer=exchange__pb2.PriceResponse.FromString,
                )
        self.GetUserVaccine = channel.unary_unary(
                '/VaccineExchange/GetUserVaccine',
                request_serializer=exchange__pb2.GetUserVaccineRequest.SerializeToString,
                response_deserializer=exchange__pb2.GetUserVaccineResponse.FromString,
                )


class VaccineExchangeServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Register(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Login(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateVaccine(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Buy(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def List(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Balance(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPrice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserVaccine(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VaccineExchangeServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Register': grpc.unary_unary_rpc_method_handler(
                    servicer.Register,
                    request_deserializer=exchange__pb2.RegisterRequest.FromString,
                    response_serializer=exchange__pb2.RegisterResponse.SerializeToString,
            ),
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=exchange__pb2.LoginRequest.FromString,
                    response_serializer=exchange__pb2.LoginResponse.SerializeToString,
            ),
            'CreateVaccine': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateVaccine,
                    request_deserializer=exchange__pb2.CreateVaccineRequest.FromString,
                    response_serializer=exchange__pb2.CreateVaccineResponse.SerializeToString,
            ),
            'Buy': grpc.unary_unary_rpc_method_handler(
                    servicer.Buy,
                    request_deserializer=exchange__pb2.BuyRequest.FromString,
                    response_serializer=exchange__pb2.BuyResponse.SerializeToString,
            ),
            'List': grpc.unary_unary_rpc_method_handler(
                    servicer.List,
                    request_deserializer=exchange__pb2.ListRequest.FromString,
                    response_serializer=exchange__pb2.ListResponse.SerializeToString,
            ),
            'Balance': grpc.unary_unary_rpc_method_handler(
                    servicer.Balance,
                    request_deserializer=exchange__pb2.BalanceRequest.FromString,
                    response_serializer=exchange__pb2.BalanceResponse.SerializeToString,
            ),
            'GetPrice': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPrice,
                    request_deserializer=exchange__pb2.PriceRequest.FromString,
                    response_serializer=exchange__pb2.PriceResponse.SerializeToString,
            ),
            'GetUserVaccine': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserVaccine,
                    request_deserializer=exchange__pb2.GetUserVaccineRequest.FromString,
                    response_serializer=exchange__pb2.GetUserVaccineResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'VaccineExchange', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class VaccineExchange(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/VaccineExchange/Register',
            exchange__pb2.RegisterRequest.SerializeToString,
            exchange__pb2.RegisterResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/VaccineExchange/Login',
            exchange__pb2.LoginRequest.SerializeToString,
            exchange__pb2.LoginResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateVaccine(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/VaccineExchange/CreateVaccine',
            exchange__pb2.CreateVaccineRequest.SerializeToString,
            exchange__pb2.CreateVaccineResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Buy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/VaccineExchange/Buy',
            exchange__pb2.BuyRequest.SerializeToString,
            exchange__pb2.BuyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def List(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/VaccineExchange/List',
            exchange__pb2.ListRequest.SerializeToString,
            exchange__pb2.ListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Balance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/VaccineExchange/Balance',
            exchange__pb2.BalanceRequest.SerializeToString,
            exchange__pb2.BalanceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPrice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/VaccineExchange/GetPrice',
            exchange__pb2.PriceRequest.SerializeToString,
            exchange__pb2.PriceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetUserVaccine(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/VaccineExchange/GetUserVaccine',
            exchange__pb2.GetUserVaccineRequest.SerializeToString,
            exchange__pb2.GetUserVaccineResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
