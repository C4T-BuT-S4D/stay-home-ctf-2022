#!/usr/bin/shx

@module crypto/handshake || {
    @require logging
    @require crypto/config
    @require crypto/utils

    @class handshake

    function handshake::__init__ {
        log::enter_function

        log::info "starting handshake"

        mktemp -p $CryptoKeysPath $CryptoKeyFileMask | read __key_path
        openssl genpkey -paramfile $CryptoDhParam -out $__key_path 2>$DEVNULL

        log::exit_function
    }

    function handshake::__destroy__ {
        log::enter_function

        log::info "destroying handshake"

        rm -f $__key_path

        log::exit_function
    }

    function handshake::get_public_key {
        log::enter_function

        openssl pkey -in $__key_path -pubout -outform DER 2>$DEVNULL

        log::exit_function
    }

    function handshake::derive_shared_key {
        log::enter_function

        local shared_key

        openssl pkeyutl -derive -inkey $__key_path -peerkey - -peerform DER 2>$DEVNULL \
            | sha256sum \
            | ( dd bs=$CryptoKeySize count=1 status=none; std::print ) \
            | read shared_key

        log::info "successfully generated shared key"

        std::print $shared_key

        log::exit_function
    }
}
