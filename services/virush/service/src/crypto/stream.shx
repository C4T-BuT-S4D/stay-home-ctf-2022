#!/usr/bin/shx

@module crypto/stream || {
    @require logging
    @require crypto/config
    @require crypto/utils

    @class stream

    function stream::__init__ {
        log::enter_function

        __key=$1

        if (( ${#__key} != $CryptoKeySize )); then
            log::error "invalid key length"
            std::raise
        fi

        log::exit_function
    }

    function stream::encrypt {
        log::enter_function

        local iv

        dd if=$URANDOM bs=$CryptoBlockSize count=1 status=none \
            | utils::hexencode \
            | read iv

        if (( ${#iv} != $CryptoIvSize )); then
            log::error "invalid iv length"
            std::raise
        fi

        std::print $iv | utils::hexdecode
        openssl $CryptoCipher -e -nosalt -K $__key -iv $iv 2>$DEVNULL

        log::debug "encrypted stream part"

        log::exit_function
    }

    function stream::decrypt {
        log::enter_function

        local iv

        dd bs=$CryptoBlockSize count=1 status=none \
            | utils::hexencode \
            | read iv

        if (( ${#iv} != $CryptoIvSize )); then
            log::error "invalid iv size"
            std::raise
        fi

        openssl $CryptoCipher -d -nosalt -K $__key -iv $iv 2>$DEVNULL

        log::debug "decrypted stream part"

        log::exit_function
    }
}
