#!/usr/bin/shx

@module loop || {
    @require logging
    @require loop/config

    @class loop

    function loop::__init__ {
        log::enter_function

        declare -ag __events=()

        log::exit_function
    }

    function loop::add_event {
        log::enter_function

        local function=$1
        local events_size=${#__events[*]}

        __events[$events_size]=$function

        log::info "added $function to event loop"

        log::exit_function
    }

    function loop::run {
        log::enter_function

        log::info "starting event loop"

        __is_active=x

        while std::hasvar __is_active; do
            local i
            local events_size=${#__events[*]}

            for (( i=0; i<events_size; i++)); do
                ${__events[$i]}
            done

            std::sleep $LoopTimeout
        done

        log::info "event loop has stopped"

        log::exit_function
    }

    function loop::stop {
        log::enter_function

        unset __is_active

        log::exit_function
    }
}
