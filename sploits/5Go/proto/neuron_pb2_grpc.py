# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2

import neurotransmitter_pb2 as neurotransmitter__pb2


class NeuronAPIStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Ping = channel.unary_unary(
            '/neuron.neuron.NeuronAPI/Ping',
            request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
        )
        self.Echo = channel.stream_stream(
            '/neuron.neuron.NeuronAPI/Echo',
            request_serializer=neurotransmitter__pb2.SerializedStuff.SerializeToString,
            response_deserializer=neurotransmitter__pb2.SerializedStuff.FromString,
        )
        self.Session = channel.stream_stream(
            '/neuron.neuron.NeuronAPI/Session',
            request_serializer=neurotransmitter__pb2.SerializedStuff.SerializeToString,
            response_deserializer=neurotransmitter__pb2.SerializedStuff.FromString,
        )


class NeuronAPIServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Ping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Echo(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Session(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NeuronAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'Ping': grpc.unary_unary_rpc_method_handler(
            servicer.Ping,
            request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
        ),
        'Echo': grpc.stream_stream_rpc_method_handler(
            servicer.Echo,
            request_deserializer=neurotransmitter__pb2.SerializedStuff.FromString,
            response_serializer=neurotransmitter__pb2.SerializedStuff.SerializeToString,
        ),
        'Session': grpc.stream_stream_rpc_method_handler(
            servicer.Session,
            request_deserializer=neurotransmitter__pb2.SerializedStuff.FromString,
            response_serializer=neurotransmitter__pb2.SerializedStuff.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'neuron.neuron.NeuronAPI', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class NeuronAPI(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Ping(request,
             target,
             options=(),
             channel_credentials=None,
             call_credentials=None,
             insecure=False,
             compression=None,
             wait_for_ready=None,
             timeout=None,
             metadata=None):
        return grpc.experimental.unary_unary(request, target, '/neuron.neuron.NeuronAPI/Ping',
                                             google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                                             google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Echo(request_iterator,
             target,
             options=(),
             channel_credentials=None,
             call_credentials=None,
             insecure=False,
             compression=None,
             wait_for_ready=None,
             timeout=None,
             metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/neuron.neuron.NeuronAPI/Echo',
                                               neurotransmitter__pb2.SerializedStuff.SerializeToString,
                                               neurotransmitter__pb2.SerializedStuff.FromString,
                                               options, channel_credentials,
                                               insecure, call_credentials, compression, wait_for_ready, timeout,
                                               metadata)

    @staticmethod
    def Session(request_iterator,
                target,
                options=(),
                channel_credentials=None,
                call_credentials=None,
                insecure=False,
                compression=None,
                wait_for_ready=None,
                timeout=None,
                metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/neuron.neuron.NeuronAPI/Session',
                                               neurotransmitter__pb2.SerializedStuff.SerializeToString,
                                               neurotransmitter__pb2.SerializedStuff.FromString,
                                               options, channel_credentials,
                                               insecure, call_credentials, compression, wait_for_ready, timeout,
                                               metadata)
